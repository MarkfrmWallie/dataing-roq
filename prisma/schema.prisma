generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model data_source {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String   @db.VarChar(255)
  user_id    String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model date_schedule {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  match_id   String?  @db.Uuid
  date_time  DateTime @db.Timestamp(6)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  match      match?   @relation(fields: [match_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model match {
  id                        String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id1                  String?         @db.Uuid
  user_id2                  String?         @db.Uuid
  created_at                DateTime        @default(now()) @db.Timestamp(6)
  updated_at                DateTime        @default(now()) @db.Timestamp(6)
  date_schedule             date_schedule[]
  user_match_user_id1Touser user?           @relation("match_user_id1Touser", fields: [user_id1], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_match_user_id2Touser user?           @relation("match_user_id2Touser", fields: [user_id2], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model startup {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                      String        @unique @db.VarChar(255)
  firstName                  String?       @db.VarChar(255)
  lastName                   String?       @db.VarChar(255)
  roq_user_id                String        @db.VarChar(255)
  tenant_id                  String        @db.VarChar(255)
  created_at                 DateTime      @default(now()) @db.Timestamp(6)
  updated_at                 DateTime      @default(now()) @db.Timestamp(6)
  data_source                data_source[]
  match_match_user_id1Touser match[]       @relation("match_user_id1Touser")
  match_match_user_id2Touser match[]       @relation("match_user_id2Touser")
  startup                    startup[]
}
